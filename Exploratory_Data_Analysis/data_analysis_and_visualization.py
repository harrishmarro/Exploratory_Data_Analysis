# -*- coding: utf-8 -*-
"""Data analysis and visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/143i8SYEs5oiMMufV4qsUq8tPf56k4v1S
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pandas import Series, DataFrame

df1 = pd.read_csv('D:/personal/SRM_Session/tips.csv')

df1.head()

sns.countplot(df1['sex'])

sns.countplot(df1['day'])

#calculating the mode
df1['sex'].value_counts().head(1)

# calculating the mean

df1['tip'].mean()

# calculating the median
df1['tip'].median()

np.mean(df1['tip'])

df1['day'].value_counts().head(1)

sns.countplot(df1['day'])
plt.show()

df1.isnull().sum()

df1.describe(include=object)

numerical = df1.describe(include=np.number)
numerical

df1.skew()

df1.kurt()

df_cov=df1.cov()

sns.heatmap(df_cov, annot = True)

sns.histplot(df1, bins=10)

sns.histplot(df1['tip'])
plt.show()

sns.histplot(numerical)



numerical.hist()

"""# Histogram"""

plt.figure(figsize=(18,5))
plt.hist(df1['total_bill'],edgecolor='red',color='yellow')
plt.xlabel('Total Bill')
plt.ylabel('Frequency')
plt.title('Simple Histogram of Total Bill column')
plt.show()

"""# Density Plot or KDE Plot"""

plt.figure(figsize=(18,5))
sns.kdeplot(df1['total_bill'])
plt.show()

plt.figure(figsize=(18,5))
sns.kdeplot(df1['total_bill'],cumulative=True)
plt.axvline(20)
plt.show()

sns.distplot(df1['total_bill'])
plt.show()

sns.distplot(df1['total_bill'],kde=False)
plt.show()

sns.lineplot(x= 'tip', y = 'Totol_bill', data=df1)

sns.distplot(df1['total_bill'],hist=False)
plt.show()

"""# Boxplot"""

sns.boxplot(data=df1,x = 'total_bill')
plt.show()

sns.boxplot(data=df1,y = 'total_bill')
plt.show()

plt.boxplot(df1['total_bill'])
plt.show()

"""# Violin Plot"""

sns.violinplot(data=df1,x='total_bill')
plt.show()

sns.scatterplot(y= 'tip', x='Total_bill', data=df1)

"""# Bar Graph"""

df1['day'].value_counts()

df1['day'].value_counts().plot(kind='bar')
plt.xlabel('Days')
plt.ylabel('Frequency')
plt.title('Simple Bar Graph of Day Column')
plt.show()

x = df1['day'].value_counts().index

y = df1['day'].value_counts().values

plt.bar(x,y)
plt.show()

sns.countplot(data=df1,x='day')
plt.show()

mean = df1['total_bill'].mean()
mean

median = df1['total_bill'].median()
median

mode = df1['total_bill'].mode()[0]
mode

sns.distplot(df1['total_bill'])
plt.axvline(mean,label='Mean',color='red')
plt.axvline(median,label='Median',color='green')
plt.axvline(mode,label='Mode',color='blue')
plt.legend()
plt.show()

plt.figure(figsize=(15,10))
sns.boxplot(data=df1)

sns.scatterplot(x='tip', y='total_bill', data =df1)

sns.regplot(x='tip', y='total_bill', data =df1)

sns.lmplot(x='tip', y='total_bill', data =df1)

sns.residplot(x='tip', y='total_bill', data =df1)

sns.lineplot(x='tip', y='total_bill', data =df1)

sns.stripplot(x='sex', y='tip', data=df1)

sns.swarmplot(x='sex', y='tip', data=df1)

pd.crosstab(index = df1['sex'], columns= df1['tip'])

"""### Missing value Treatment"""

df = pd.read_csv("D:/dataset/bigmartsales.csv")
df.head(10)

df.isnull().sum()

df.info()

df.shape

df.describe(include = np.number)

df.Item_Weight.replace(0,np.NaN,inplace= True)

df.Item_Weight.describe()

plt.figure(figsize=(10,10))
sns.heatmap(df.isnull(), cbar= True)

mean =df['Item_Weight'].mean()
df.Item_Weight.fillna(mean,inplace = True)

plt.figure(figsize=(10,10))
sns.heatmap(df.isnull(), cbar= True)

df.isnull().sum()

df.Outlet_Location_Type.value_counts()

df.Outlet_Location_Type.replace("na", np.NaN, inplace =True)

df.Outlet_Location_Type.value_counts()

df.Outlet_Location_Type.replace("NAN", np.NaN, inplace =True)
df.Outlet_Location_Type.replace("?", np.NaN, inplace =True)
df.Outlet_Location_Type.replace("  --", np.NaN, inplace =True)
df.Outlet_Location_Type.replace("  -", np.NaN, inplace =True)

df.Outlet_Location_Type.value_counts()

df.Outlet_Location_Type.replace("Tier1", "Tier 1", inplace =True)

df_impute = df[["Item_Outlet_Sales","Outlet_Location_Type"]].dropna()


# group the data by the location type
# mean(): returns the mean of the values
df_impute = df_impute.groupby(df_impute["Outlet_Location_Type"]).mean()

# display the dataframe
df_impute

# create a variable 'ind' for all the indexes having missing data
index = np.where(df.Outlet_Location_Type.isnull())[0]

# impute the values using a for loop
for ind in index:                                               # for the rows containing missing data
    if df.loc[ind,"Item_Outlet_Sales"] <= 2100:           # if the sales is less than 2100 for the location
        df.loc[ind,"Outlet_Location_Type"] = "Tier1"      # impute the value "Tier1"
    elif df.loc[ind,"Item_Outlet_Sales"] >= 2500:         # if the sales is more than 2500 for the location
        df.loc[ind,"Outlet_Location_Type"] = "Tier 2"     # impute the value "Tier 2"
    else:                                                       # if both the if conditions fail
        df.loc[ind,"Outlet_Location_Type"] = "Tier 3"

df.isnull().sum()

df.Outlet_Size.info()

df.Outlet_Size.value_counts()

mode = df.Outlet_Size.value_counts()[1]
mode

df.Outlet_Size.fillna(mode, inplace=True)

df.isnull().sum()

"""### Outlier Analysis
(i) Z score

(ii) IQR Method

"""

from scipy import stats
z = np.abs(stats.zscore(df['Item_Weight']))

z

print(np.where(z>3))

# do the same for all the features

# IQR Method

Q1= df['Item_Visibility'].quantile(0.25)

Q3=  df['Item_Visibility'].quantile(0.75)

IQR = Q3-Q1

df_Item_visibility = df[~((df['Item_Visibility']<(Q1- 1.5*IQR))| (df['Item_Visibility']>(Q3+ 1.5*IQR)))]

df['Item_Visibility'].shape

df_Item_visibility.shape

"""### Encoding Techniques"""











"""# Transformation of Data"""

df1['SQRT TB'] = np.sqrt(df1['total_bill'])
df1['LOG TB'] = np.log(df1['total_bill'])

print("Skewness of Original data is",df1['total_bill'].skew())
print("Skewness of SQRT Transformed data is",df1['SQRT TB'].skew())
print("Skewness of Min Max Scaled data is",df1['LOG TB'].skew())

print("Kurtosis of Original data is",df1['total_bill'].kurt())
print("Kurtosis of SQRT Transformed data is",df1['SQRT TB'].kurt())
print("Kurtosis of Min Max Scaled data is",df1['LOG TB'].kurt())

fig, axes = plt.subplots(1,3,figsize=(15,5))
sns.distplot(df1['total_bill'],ax=axes[0])
sns.distplot(df1['SQRT TB'],ax=axes[1])
sns.distplot(df1['LOG TB'],ax=axes[2])
plt.show()

df1.head()

pd.crosstab(df1['sex'],df1['smoker'])

